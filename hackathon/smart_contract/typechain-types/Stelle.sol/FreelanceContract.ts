/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FreelanceContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "client"
      | "compensation"
      | "completeProject"
      | "deadline"
      | "freelancer"
      | "projectCompleted"
      | "projectDescription"
      | "withdrawCompensation"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "client", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compensation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeProject",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "freelancer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectDescription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCompensation",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "client", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freelancer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCompensation",
    data: BytesLike
  ): Result;
}

export interface FreelanceContract extends BaseContract {
  connect(runner?: ContractRunner | null): FreelanceContract;
  waitForDeployment(): Promise<this>;

  interface: FreelanceContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  client: TypedContractMethod<[], [string], "view">;

  compensation: TypedContractMethod<[], [bigint], "view">;

  completeProject: TypedContractMethod<[], [void], "nonpayable">;

  deadline: TypedContractMethod<[], [bigint], "view">;

  freelancer: TypedContractMethod<[], [string], "view">;

  projectCompleted: TypedContractMethod<[], [boolean], "view">;

  projectDescription: TypedContractMethod<[], [string], "view">;

  withdrawCompensation: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "client"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "compensation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "completeProject"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "freelancer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectCompleted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "projectDescription"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawCompensation"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
